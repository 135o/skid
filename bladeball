getgenv().debugUI = getgenv().debugUI or true
getgenv().useTrainingBalls = getgenv().useTrainingBalls or false

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

local localPlayer = Players.LocalPlayer
local isParried = false
local targetConnection = nil

local function findBall()
	local function isValidBall(ball)
		return ball:IsA("BasePart") and ball:GetAttribute("realBall")
	end
	local isWaiting = localPlayer.Team and localPlayer.Team.Name == "Waiting"
	local onlyTrainingBalls = getgenv().useTrainingBalls and isWaiting
	local folder = workspace:FindFirstChild(onlyTrainingBalls and "TrainingBalls" or "Balls")
	if folder then
		for _, ball in ipairs(folder:GetChildren()) do
			if isValidBall(ball) then return ball end
		end
	end
end

local function resetConnection()
	if targetConnection then
		targetConnection:Disconnect()
		targetConnection = nil
	end
end

local function setUpBallConnection(folder)
	if not folder then return end
	folder.ChildAdded:Connect(function()
		local ball = findBall()
		if not ball then return end
		resetConnection()
		targetConnection = ball:GetAttributeChangedSignal("target"):Connect(function()
			isParried = false
		end)
	end)
end

setUpBallConnection(workspace:FindFirstChild(getgenv().useTrainingBalls and "TrainingBalls" or "Balls"))

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "DebugUI_" .. HttpService:GenerateGUID(false)
screenGui.ResetOnSpawn = false
screenGui.Parent = CoreGui

local background = Instance.new("Frame")
background.Size = UDim2.new(0, 400, 0, 260)
background.Position = UDim2.new(0, 10, 0, 10)
background.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
background.BackgroundTransparency = 0.45
background.AnchorPoint = Vector2.new(0, 0)
background.Parent = screenGui
background.Visible = getgenv().debugUI

-- Add a small UICorner to the debug UI
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 8)  -- Smaller radius for the corners
uiCorner.Parent = background

local function createTextLabel(name, yOffset, text)
	local label = Instance.new("TextLabel")
	label.Name = name
	label.Size = UDim2.new(0, 400, 0, 18)
	label.Position = UDim2.new(0, 10, 0, yOffset)
	label.BackgroundTransparency = 1
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.TextStrokeTransparency = 0.7
	label.Font = Enum.Font.SourceSans
	label.TextSize = 14
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.RichText = true
	label.Text = text or ""
	label.Visible = getgenv().debugUI
	label.Parent = background
	return label
end

local labels = {
	Velocity = createTextLabel("Velocity", 20),
	Scale = createTextLabel("Scale", 40),
	Distance = createTextLabel("Distance", 60),
	Target = createTextLabel("Target", 80),
	BallPos = createTextLabel("BallPos", 100),
	PlayerPos = createTextLabel("PlayerPos", 120)
}

local debugSphere = Instance.new("Part")
debugSphere.Shape = Enum.PartType.Ball
debugSphere.Material = Enum.Material.Neon
debugSphere.Anchored = true
debugSphere.CanCollide = false
debugSphere.Transparency = 0.9
debugSphere.Color = Color3.fromRGB(255, 0, 0)
debugSphere.Size = Vector3.new(1, 1, 1)
debugSphere.Name = "ParryRangeVisualizer"
debugSphere.Parent = workspace

local function formatVector3(vec)
	return string.format("X: %.0f, Y: %.0f, Z: %.0f", vec.X, vec.Y, vec.Z)
end

RunService.PreSimulation:Connect(function(dt)
	local ball = findBall()
	local hrp = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
	if not ball or not hrp then return end

	local velocity = ball.zoomies.VectorVelocity
	local speed = velocity.Magnitude
	local currentPosition = ball.Position
	local acceleration = (ball.AssemblyLinearVelocity - velocity)
	local lookaheadTime = 0.17

	local predictedPosition = currentPosition + (velocity * lookaheadTime) + (0.5 * acceleration * lookaheadTime ^ 2)
	local predictedDistance = (predictedPosition - hrp.Position).Magnitude

	local baseRange = math.log(speed + 1) * 5
	local parryRange = math.clamp(baseRange, 10, 200)

	debugSphere.Position = hrp.Position
	debugSphere.Size = Vector3.new(parryRange * 2, parryRange * 2, parryRange * 2)

	local targetName = ball:GetAttribute("target")

	labels.Velocity.Text = "Velocity: " .. string.format("%.0f", speed)
	labels.Scale.Text = "Scale: " .. string.format("%.0f", parryRange)
	labels.Distance.Text = "Distance: " .. string.format("%.0f", predictedDistance)
	labels.BallPos.Text = "BallPos: " .. formatVector3(currentPosition)
	labels.PlayerPos.Text = "PlayerPos: " .. formatVector3(hrp.Position)
	labels.Target.Text = "Target: " .. (targetName or "N/A")

	if targetName == localPlayer.Name and not isParried and predictedDistance <= parryRange then
		local mousePos = UserInputService:GetMouseLocation()
		VirtualInputManager:SendMouseButtonEvent(mousePos.X, mousePos.Y, 0, true, game, 0)
		VirtualInputManager:SendMouseButtonEvent(mousePos.X, mousePos.Y, 0, false, game, 0)
		isParried = true
	end
end)
